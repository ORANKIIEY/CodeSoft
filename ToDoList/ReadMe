Description:

Users can add, examine, and remove tasks from a list using this simple C++ to-do list management tool. For simple interaction, it offers a menu-driven interface. It ensures the task list does not exceed the maximum capacity of 10 tasks

Features:

Add A New Task: The to-do list allows users to add new tasks. The application makes sure the task list doesn't go over its allotted space. View The Tasks: All of the tasks that are now listed are visible to users. Delete Task: By inputting the relevant index, users can remove a particular task from the list.

Instructions for Use:

Compilation: Compile the program using a C++ compiler. For example, you can use g++ on Unix-like systems or MinGW on Windows.

Copy code
g++ -o todo_list todo_list.cpp
Execution: Run the compiled executable.

bash
Copy code
./todo_list
Menu Navigation: Follow the on-screen menu to perform desired operations.

Enter 1 to add a new task.
Enter 2 to view the tasks.
Enter 3 to delete a task.
Enter 0 to end the program.
Dependencies:

This program utilizes the iostream and string libraries from the C++ Standard Library.

Additional Information: Strong input handling is guaranteed by the program, which also provides the required error messages for user input that is not legitimate. In order to avoid unexpected behaviour, the input buffer is appropriately cleared. Ten jobs is the maximum capacity of the task list, which guarantees memory efficiency. When a task is deleted, the task count is updated appropriately, preserving the list's integrity.




Features in Detail:
1. Add A New Task: For multi-word tasks, users can use getline() to enter a task.
• Before adding a new task, the application determines whether the task list has reached its maximum size.
2. View Tasks:  A numbered list of all tasks is shown.
• A suitable message is displayed if there are no assignments available.
3. Delete Task: The task number to be deleted must be entered by the user.
• The task number is verified to be within the acceptable range by input validation.
• To fill the space left by the removed task, tasks are moved around in the array.
4. Input Handling: To properly handle line breaks, cin.ignore() clears the input buffer
.• When a task number or menu selection is incorrect, error messages are shown.
Key Advantages:
	•	Easy-to-understand menu-driven interface; robust handling with clear messages for invalid inputs and error scenarios; efficient memory usage with a fixed array size that guarantees minimal resource usage; and educational example: Excellent for novices learning array manipulation and menu-based programming.
Potential Enhancements:
	•	Permit the task list to be dynamically resized using std::vector.• Tasks can be loaded and saved from a file for long-term storage.• Include the option to mark assignments as finished.

This program is a foundational implementation and can be expanded upon as needed!
