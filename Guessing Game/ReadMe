Guessing game C++

Title:Orankiiey’s Guessing Game  

*Description:*  
This is a simple and entertaining number guessing game written in C++. 
Guessing a randomly generated number between 1 and 100 is the goal. Gamers are allowed to estimate the right number up to five times. 
The software indicates whether a guess was too high or too low after each one. The player wins if their guess is accurate within the given number of tries; 
if not, they lose and the correct number is revealed. 

*Features:*  
1. Random Number Generation: The player can guess a random number between 1 and 100 using this feature.  
2. Limited Attempts: Players may predict the number no more than five times.  
3. User Input Handling: Provides feedback while accepting and verifying user input.  
4. Guess Feedback: After every try, the player is notified if their guess was too high or too low.  
5. Game Outcome: Indicates a win if the right number is predicted or, in the event of a loss, exposes the right number. If the player fails, the application displays the right number and indicates whether they won or lost.


*Instructions for Use:*  

1. *Compilation:* Use a C++ compiler to compile the program. For instance:  
   bash
   g++ -o guessing_game guessing_game.cpp
     

2. *Execution:* Run the compiled program:  
   bash
   ./guessing_game
     

3. *Gameplay:*  
   To play, adhere to the on-screen directions.  
   Choose a number between 1 and 100 by guessing.  
   - You have five chances to get it right.  
   - Each guess is followed by the comments "too high" or "too low."  
   You win if you correctly predict the number five times. If not, the right number is shown and you lose. You have five chances to figure out the right number.

*Dependencies:*  
The C++ Standard Library's iostream, cstdlib, and ctime libraries are used in this application.
Makes use of the following C++ Standard Library libraries:
	•	iostream for input and output.
	•	cstdlib for random number generation.
	•	ctime to seed the random number generator.

Key Concepts Demonstrated:
	•	Random number generation using srand and rand.
	•	Input handling with cin and conditional statements for feedback.
	•	Loop constructs to limit the number of guesses and manage game flow.
	•	Use of control structures (if-else) to determine outcomes and provide user guidance.


Structure of Code:
1. Initialization: The random number generator was seeded with the current time.
   Pick a random number between 1 and 100.
2. Game Loop:  Permit up to five guesses to be entered by the player.
   Give feedback after comparing the input to the generated value.
3. Outcome Display:  If all tries are made, reveal the number or congratulate the participant on a correct guess.

*Additional Notes:*  
-To guarantee that a new number is produced with every iteration, the random number generator is seeded using the current time.  
- The application makes the game easy to use by providing feedback and simple instructions.  
- When the right number is guessed or all five attempts have been made, the game is over.  
